// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class LaunchDataNative {
  String? missionName;
  String? siteName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['missionName'] = missionName;
    pigeonMap['siteName'] = siteName;
    return pigeonMap;
  }

  static LaunchDataNative decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LaunchDataNative()
      ..missionName = pigeonMap['missionName'] as String?
      ..siteName = pigeonMap['siteName'] as String?;
  }
}

class _SpaceXCodec extends StandardMessageCodec {
  const _SpaceXCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is LaunchDataNative) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return LaunchDataNative.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class SpaceX {
  static const MessageCodec<Object?> codec = _SpaceXCodec();

  Future<List<LaunchDataNative?>> getLaunches();
  static void setup(SpaceX? api) {
    {
      const BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SpaceX.getLaunches', codec);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          final List<LaunchDataNative?> output = await api.getLaunches();
          return output;
        });
      }
    }
  }
}
